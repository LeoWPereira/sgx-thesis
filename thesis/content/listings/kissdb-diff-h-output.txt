--- kissdb.h.orig	2017-07-16 19:11:00.223450868 +0200
+++ kissdb.h	2017-07-16 19:14:16.514165365 +0200
@@ -8,9 +8,19 @@
 #ifndef ___KISSDB_H
 #define ___KISSDB_H
 
+#ifdef _EXPORT
+#define DLLEXPORT __declspec( dllexport )
+#else
+#define DLLEXPORT __declspec( dllimport )
+#endif
+
 #include <stdio.h>
 #include <stdint.h>
 
+#ifdef SGX_ENCLAVE
+#include "sgx_lib_stdio.h" // includes FILE in the enclave
+#endif
+
 #ifdef __cplusplus
 extern "C" {
 #endif
@@ -31,14 +41,21 @@
  * value_size, but should never be changed.
  */
 typedef struct {
-	unsigned long hash_table_size;
 	unsigned long key_size;
 	unsigned long value_size;
+
+#ifdef SGX_ENCLAVE
+	// hash tables live inside enclave only
+	unsigned long hash_table_size;
 	unsigned long hash_table_size_bytes;
 	unsigned long num_hash_tables;
 	uint64_t *hash_tables;
 	FILE *f;
-} KISSDB;
+#else
+	// identifies the enclave associated with this KISSDB instance in the untrusted application
+	uint64_t eid;
+#endif
+} DLLEXPORT KISSDB;
 
 /**
  * I/O error or file not found
@@ -97,20 +114,21 @@
  * @param value_size Size of values in bytes
  * @return 0 on success, nonzero on error
  */
-extern int KISSDB_open(
+extern DLLEXPORT int KISSDB_open(
 	KISSDB *db,
 	const char *path,
 	int mode,
 	unsigned long hash_table_size,
 	unsigned long key_size,
-	unsigned long value_size);
+	unsigned long value_size,
+	uint8_t encryption_key[128]);
 
 /**
  * Close database
  *
  * @param db Database struct
  */
-extern void KISSDB_close(KISSDB *db);
+extern DLLEXPORT void KISSDB_close(KISSDB *db);
 
 /**
  * Get an entry
@@ -120,7 +138,7 @@
  * @param vbuf Value buffer (value_size bytes capacity)
  * @return -1 on I/O error, 0 on success, 1 on not found
  */
-extern int KISSDB_get(KISSDB *db,const void *key,void *vbuf);
+extern DLLEXPORT int KISSDB_get(KISSDB *db,const void *key,void *vbuf);
 
 /**
  * Put an entry (overwriting it if it already exists)
@@ -133,7 +151,7 @@
  * @param value Value (value_size bytes)
  * @return -1 on I/O error, 0 on success
  */
-extern int KISSDB_put(KISSDB *db,const void *key,const void *value);
+extern DLLEXPORT int KISSDB_put(KISSDB *db,const void *key,const void *value);
 
 /**
  * Cursor used for iterating over all entries in database
@@ -142,7 +160,7 @@
 	KISSDB *db;
 	unsigned long h_no;
 	unsigned long h_idx;
-} KISSDB_Iterator;
+} DLLEXPORT KISSDB_Iterator;
 
 /**
  * Initialize an iterator
@@ -150,7 +168,7 @@
  * @param db Database struct
  * @param i Iterator to initialize
  */
-extern void KISSDB_Iterator_init(KISSDB *db,KISSDB_Iterator *dbi);
+extern DLLEXPORT void KISSDB_Iterator_init(KISSDB *db,KISSDB_Iterator *dbi);
 
 /**
  * Get the next entry
@@ -163,7 +181,7 @@
  * @param vbuf Buffer to fill with next value (value_size bytes)
  * @return 0 if there are no more entries, negative on error, positive if an kbuf/vbuf have been filled
  */
-extern int KISSDB_Iterator_next(KISSDB_Iterator *dbi,void *kbuf,void *vbuf);
+extern DLLEXPORT int KISSDB_Iterator_next(KISSDB_Iterator *dbi,void *kbuf,void *vbuf);
 
 #ifdef __cplusplus
 }
