--- kissdb.c.orig	2017-07-16 20:36:45.696836747 +0200
+++ kissdb.c	2017-07-16 08:32:22.982759222 +0200
@@ -19,6 +19,8 @@
 #include <stdlib.h>
 #include <stdint.h>
 
+#include "sgx_lib_t_stdio.h"
+
 #ifdef _WIN32
 #define fseeko _fseeki64
 #define ftello _ftelli64
@@ -42,7 +44,8 @@
  int mode,
  unsigned long hash_table_size,
  unsigned long key_size,
- unsigned long value_size)
+ unsigned long value_size,
+ uint8_t *encryption_key)
 {
  uint64_t tmp;
  uint8_t tmp2[4];
@@ -74,16 +77,17 @@
  }
  if (ftello(db->f) < KISSDB_HEADER_SIZE) {
   /* write header if not already present */
+  /* header data is not sensitive -> unencrypted */
   if ((hash_table_size)&&(key_size)&&(value_size)) {
    if (fseeko(db->f,0,SEEK_SET)) { fclose(db->f); return KISSDB_ERROR_IO; }
    tmp2[0] = 'K'; tmp2[1] = 'd'; tmp2[2] = 'B'; tmp2[3] = KISSDB_VERSION;
-   if (fwrite(tmp2,4,1,db->f) != 1) { fclose(db->f); return KISSDB_ERROR_IO; }
+   if (fwrite_insecure(tmp2,4,1,db->f) != 1) { fclose(db->f); return KISSDB_ERROR_IO; }
    tmp = hash_table_size;
-   if (fwrite(&tmp,sizeof(uint64_t),1,db->f) != 1) { fclose(db->f); return KISSDB_ERROR_IO; }
+   if (fwrite_insecure(&tmp,sizeof(uint64_t),1,db->f) != 1) { fclose(db->f); return KISSDB_ERROR_IO; }
    tmp = key_size;
-   if (fwrite(&tmp,sizeof(uint64_t),1,db->f) != 1) { fclose(db->f); return KISSDB_ERROR_IO; }
+   if (fwrite_insecure(&tmp,sizeof(uint64_t),1,db->f) != 1) { fclose(db->f); return KISSDB_ERROR_IO; }
    tmp = value_size;
-   if (fwrite(&tmp,sizeof(uint64_t),1,db->f) != 1) { fclose(db->f); return KISSDB_ERROR_IO; }
+   if (fwrite_insecure(&tmp,sizeof(uint64_t),1,db->f) != 1) { fclose(db->f); return KISSDB_ERROR_IO; }
    fflush(db->f);
   } else {
    fclose(db->f);
@@ -91,24 +95,24 @@
   }
  } else {
   if (fseeko(db->f,0,SEEK_SET)) { fclose(db->f); return KISSDB_ERROR_IO; }
-  if (fread(tmp2,4,1,db->f) != 1) { fclose(db->f); return KISSDB_ERROR_IO; }
+  if (fread_insecure(tmp2,4,1,db->f) != 1) { fclose(db->f); return KISSDB_ERROR_IO; }
   if ((tmp2[0] != 'K')||(tmp2[1] != 'd')||(tmp2[2] != 'B')||(tmp2[3] != KISSDB_VERSION)) {
    fclose(db->f);
    return KISSDB_ERROR_CORRUPT_DBFILE;
   }
-  if (fread(&tmp,sizeof(uint64_t),1,db->f) != 1) { fclose(db->f); return KISSDB_ERROR_IO; }
+  if (fread_insecure(&tmp,sizeof(uint64_t),1,db->f) != 1) { fclose(db->f); return KISSDB_ERROR_IO; }
   if (!tmp) {
    fclose(db->f);
    return KISSDB_ERROR_CORRUPT_DBFILE;
   }
   hash_table_size = (unsigned long)tmp;
-  if (fread(&tmp,sizeof(uint64_t),1,db->f) != 1) { fclose(db->f); return KISSDB_ERROR_IO; }
+  if (fread_insecure(&tmp,sizeof(uint64_t),1,db->f) != 1) { fclose(db->f); return KISSDB_ERROR_IO; }
   if (!tmp) {
    fclose(db->f);
    return KISSDB_ERROR_CORRUPT_DBFILE;
   }
   key_size = (unsigned long)tmp;
-  if (fread(&tmp,sizeof(uint64_t),1,db->f) != 1) { fclose(db->f); return KISSDB_ERROR_IO; }
+  if (fread_insecure(&tmp,sizeof(uint64_t),1,db->f) != 1) { fclose(db->f); return KISSDB_ERROR_IO; }
   if (!tmp) {
    fclose(db->f);
    return KISSDB_ERROR_CORRUPT_DBFILE;
@@ -128,7 +132,8 @@
  }
  db->num_hash_tables = 0;
  db->hash_tables = (uint64_t *)0;
- while (fread(httmp,db->hash_table_size_bytes,1,db->f) == 1) {
+ /* hash tables are stored unencrypted */
+ while (fread_insecure(httmp,db->hash_table_size_bytes,1,db->f) == 1) {
   hash_tables_rea = realloc(db->hash_tables,db->hash_table_size_bytes * (db->num_hash_tables + 1));
   if (!hash_tables_rea) {
    KISSDB_close(db);
@@ -255,7 +260,8 @@
 
    if (fseeko(db->f,htoffset + (sizeof(uint64_t) * hash),SEEK_SET))
     return KISSDB_ERROR_IO;
-   if (fwrite(&endoffset,sizeof(uint64_t),1,db->f) != 1)
+   /* hash tables are stored unencrypted */
+   if (fwrite_insecure(&endoffset,sizeof(uint64_t),1,db->f) != 1)
     return KISSDB_ERROR_IO;
    cur_hash_table[hash] = endoffset;
 
@@ -283,7 +289,8 @@
 
  cur_hash_table[hash] = endoffset + db->hash_table_size_bytes; /* where new entry will go */
 
- if (fwrite(cur_hash_table,db->hash_table_size_bytes,1,db->f) != 1)
+ /* hash tables are stored unencrypted */
+ if (fwrite_insecure(cur_hash_table,db->hash_table_size_bytes,1,db->f) != 1)
   return KISSDB_ERROR_IO;
 
  if (fwrite(key,db->key_size,1,db->f) != 1)
@@ -294,7 +301,8 @@
  if (db->num_hash_tables) {
   if (fseeko(db->f,lasthtoffset + (sizeof(uint64_t) * db->hash_table_size),SEEK_SET))
    return KISSDB_ERROR_IO;
-  if (fwrite(&endoffset,sizeof(uint64_t),1,db->f) != 1)
+  /* hash tables are stored unencrypted */
+  if (fwrite_insecure(&endoffset,sizeof(uint64_t),1,db->f) != 1)
    return KISSDB_ERROR_IO;
   db->hash_tables[((db->hash_table_size + 1) * (db->num_hash_tables - 1)) + db->hash_table_size] = endoffset;
  }
@@ -306,13 +314,6 @@
  return 0; /* success */
 }
 
-void KISSDB_Iterator_init(KISSDB *db,KISSDB_Iterator *dbi)
-{
- dbi->db = db;
- dbi->h_no = 0;
- dbi->h_idx = 0;
-}
-
 int KISSDB_Iterator_next(KISSDB_Iterator *dbi,void *kbuf,void *vbuf)
 {
  uint64_t offset;
@@ -340,113 +341,3 @@
 
  return 0;
 }
-
-#ifdef KISSDB_TEST
-
-#include <inttypes.h>
-
-int main(int argc,char **argv)
-{
- uint64_t i,j;
- uint64_t v[8];
- KISSDB db;
- KISSDB_Iterator dbi;
- char got_all_values[10000];
- int q;
-
- printf("Opening new empty database test.db...\n");
-
- if (KISSDB_open(&db,"test.db",KISSDB_OPEN_MODE_RWREPLACE,1024,8,sizeof(v))) {
-  printf("KISSDB_open failed\n");
-  return 1;
- }
-
- printf("Adding and then re-getting 10000 64-byte values...\n");
-
- for(i=0;i<10000;++i) {
-  for(j=0;j<8;++j)
-   v[j] = i;
-  if (KISSDB_put(&db,&i,v)) {
-   printf("KISSDB_put failed (%"PRIu64")\n",i);
-   return 1;
-  }
-  memset(v,0,sizeof(v));
-  if ((q = KISSDB_get(&db,&i,v))) {
-   printf("KISSDB_get (1) failed (%"PRIu64") (%d)\n",i,q);
-   return 1;
-  }
-  for(j=0;j<8;++j) {
-   if (v[j] != i) {
-    printf("KISSDB_get (1) failed, bad data (%"PRIu64")\n",i);
-    return 1;
-   }
-  }
- }
-
- printf("Getting 10000 64-byte values...\n");
-
- for(i=0;i<10000;++i) {
-  if ((q = KISSDB_get(&db,&i,v))) {
-   printf("KISSDB_get (2) failed (%"PRIu64") (%d)\n",i,q);
-   return 1;
-  }
-  for(j=0;j<8;++j) {
-   if (v[j] != i) {
-    printf("KISSDB_get (2) failed, bad data (%"PRIu64")\n",i);
-    return 1;
-   }
-  }
- }
-
- printf("Closing and re-opening database in read-only mode...\n");
-
- KISSDB_close(&db);
-
- if (KISSDB_open(&db,"test.db",KISSDB_OPEN_MODE_RDONLY,1024,8,sizeof(v))) {
-  printf("KISSDB_open failed\n");
-  return 1;
- }
-
- printf("Getting 10000 64-byte values...\n");
-
- for(i=0;i<10000;++i) {
-  if ((q = KISSDB_get(&db,&i,v))) {
-   printf("KISSDB_get (3) failed (%"PRIu64") (%d)\n",i,q);
-   return 1;
-  }
-  for(j=0;j<8;++j) {
-   if (v[j] != i) {
-    printf("KISSDB_get (3) failed, bad data (%"PRIu64")\n",i);
-    return 1;
-   }
-  }
- }
-
- printf("Iterator test...\n");
-
- KISSDB_Iterator_init(&db,&dbi);
- i = 0xdeadbeef;
- memset(got_all_values,0,sizeof(got_all_values));
- while (KISSDB_Iterator_next(&dbi,&i,&v) > 0) {
-  if (i < 10000)
-   got_all_values[i] = 1;
-  else {
-   printf("KISSDB_Iterator_next failed, bad data (%"PRIu64")\n",i);
-   return 1;
-  }
- }
- for(i=0;i<10000;++i) {
-  if (!got_all_values[i]) {
-   printf("KISSDB_Iterator failed, missing value index %"PRIu64"\n",i);
-   return 1;
-  }
- }
-
- KISSDB_close(&db);
-
- printf("All tests OK!\n");
-
- return 0;
-}
-
-#endif
